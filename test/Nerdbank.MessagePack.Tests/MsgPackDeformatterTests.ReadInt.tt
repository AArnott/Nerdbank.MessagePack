<#@ assembly name="System.Core" #>
<#@ assembly name="System.Numerics" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Numerics" #>
// Copyright (c) Andrew Arnott. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

#pragma warning disable SA1121 // Use built-in type alias

using System.Numerics;

public partial class MsgPackDeformatterTests
{
<#
var unsignedTypes = new Type[]
{
	typeof(byte),
	typeof(ushort),
	typeof(uint),
	typeof(ulong),
};
var signedTypes = new Type[]
{
	typeof(sbyte),
	typeof(short),
	typeof(int),
	typeof(long),
};
var allTypes = unsignedTypes.Concat(signedTypes);
BigInteger GetMaxValueAsInt(Type intType) => BigInteger.Parse("0" + GetMaxValue(intType).Substring(2), System.Globalization.NumberStyles.HexNumber);
BigInteger GetMinValueAsInt(Type intType) => BigInteger.Parse(GetMinValue(intType).Substring(2), System.Globalization.NumberStyles.HexNumber);
string GetMaxValue(Type intType) => $"0x{intType.GetField(nameof(int.MaxValue)).GetValue(null):x}";
string GetMinValue(Type intType) => $"0x{intType.GetField(nameof(int.MinValue)).GetValue(null):x}";
#>
	private const sbyte MinNegativeFixInt = unchecked((sbyte)MessagePackCode.MinNegativeFixInt);
	private const sbyte MaxNegativeFixInt = unchecked((sbyte)MessagePackCode.MaxNegativeFixInt);

	private readonly IReadOnlyList<(BigInteger Value, ReadOnlySequence<byte> Encoded)> integersOfInterest = new List<(BigInteger Value, ReadOnlySequence<byte> Encoded)>
	{
		// * FixInt
		// ** non-boundary
		(3, Encode((ref Writer w) => MsgPackFormatter.Default.WriteByte(ref w, 3))),
<# foreach (Type type in allTypes) { #>
		(3, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, 3))),
<# } #>

		(-3, Encode((ref Writer w) => MsgPackFormatter.Default.WriteSByte(ref w, -3))),
<# foreach (Type type in signedTypes) { #>
		(-3, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, -3))),
<# } #>

		// ** Boundary conditions
		/* MaxFixInt */
		(MessagePackCode.MaxFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteByte(ref w, MessagePackCode.MaxFixInt))),
<# foreach (Type type in allTypes) { #>
		(MessagePackCode.MaxFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, checked((<#=type.Name#>)MessagePackCode.MaxFixInt)))),
<# } #>
		/* MinFixInt */
		(MessagePackCode.MinFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteByte(ref w, MessagePackCode.MinFixInt))),
<# foreach (Type type in allTypes) { #>
		(MessagePackCode.MinFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, checked((<#=type.Name#>)MessagePackCode.MinFixInt)))),
<# } #>
		/* MinNegativeFixInt */
<# foreach (Type type in signedTypes) { #>
		(MinNegativeFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, MinNegativeFixInt))),
<# } #>
		/* MaxNegativeFixInt */
<# foreach (Type type in signedTypes) { #>
		(MaxNegativeFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=type.Name#>(ref w, MaxNegativeFixInt))),
<# } #>

		(MessagePackCode.MaxFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteInt32(ref w, MessagePackCode.MaxFixInt))),
		(MessagePackCode.MinFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteInt32(ref w, MessagePackCode.MinFixInt))),
		(MaxNegativeFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteInt32(ref w, MaxNegativeFixInt))),
		(MinNegativeFixInt, Encode((ref Writer w) => MsgPackFormatter.Default.WriteInt32(ref w, MinNegativeFixInt))),

		// * Encoded as each type of at least 8 bits
		// ** Small positive value
<# foreach (Type t1 in allTypes) { #>
		(3, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=t1.Name#>(ref w, 3))),
<# } #>

		// ** Small negative value
<# foreach (Type t1 in signedTypes) { #>
		(-3, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=t1.Name#>(ref w, -3))),
<# } #>

		// ** Max values
		/* Positive */
<# foreach (var typeForMaxValue in allTypes) {
	var maxValue = GetMaxValueAsInt(typeForMaxValue);
	foreach (var encodedType in allTypes) {
		if (GetMaxValueAsInt(encodedType) >= maxValue) { #>
		(0x<#=maxValue.ToString("x")#>, Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=encodedType.Name#>(ref w, <#=maxValue#>))),
<#	  }
	}
} #>
		/* Negative */
<# foreach (var typeForMinValue in signedTypes) {
	var minValue = GetMinValueAsInt(typeForMinValue);
	foreach (var encodedType in signedTypes) {
		if (GetMinValueAsInt(encodedType) <= minValue) { #>
		(unchecked((<#=typeForMinValue.Name#>)0x<#=minValue.ToString("x")#>), Encode((ref Writer w) => MsgPackFormatter.Default.Write<#=encodedType.Name#>(ref w, <#=minValue#>))),
<#	  }
	}
} #>
	};
<# foreach (Type t1 in allTypes) { #>

	[Fact]
	public void Read<#=t1.Name#>_ReadVariousLengthsAndMagnitudes()
	{
		foreach ((BigInteger value, ReadOnlySequence<byte> encoded) in this.integersOfInterest)
		{
			this.logger.WriteLine("Decoding 0x{0:x} from {1}", value, MessagePackCode.ToFormatName(encoded.First.Span[0]));
			if (value <= <#=t1.Name#>.MaxValue && value >= <#=t1.Name#>.MinValue)
			{
				Reader reader = new Reader(encoded, MsgPackDeformatter.Default);
				Assert.Equal(value, MsgPackDeformatter.Default.Read<#=t1.Name#>(ref reader));
			}
			else
			{
#if !ENABLE_IL2CPP
				Assert.Throws<OverflowException>(delegate
				{
					Reader reader = new Reader(encoded, MsgPackDeformatter.Default);
					MsgPackDeformatter.Default.Read<#=t1.Name#>(ref reader);
				});
#endif
			}
		}
	}

	[Fact]
	public void Read<#=t1.Name#>_ThrowsOnUnexpectedCode()
	{
		Assert.Throws<SerializationException>(delegate
		{
			Reader reader = new Reader(StringEncodedAsFixStr, MsgPackDeformatter.Default);
			MsgPackDeformatter.Default.Read<#=t1.Name#>(ref reader);
		});
	}
<# } #>
}
