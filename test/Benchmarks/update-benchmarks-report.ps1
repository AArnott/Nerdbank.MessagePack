<#
.SYNOPSIS
    This script updates the perf.md document with the latest benchmark results.
.DESCRIPTION
    This script updates the perf.md document with the latest benchmark results.
    It reads the CSV report generated by BenchmarkDotNet and generates a markdown file with the results.
    The markdown file is used to display the benchmark results in the documentation.

    This command should be run *before* running this script:
    dotnet run -c release -- -f SimplePoco.* -j short
#>

[CmdletBinding()]
Param(
    [Parameter()]
    [string]$CsvReportPath = "$PSScriptRoot\BenchmarkDotNet.Artifacts\results\SimplePoco-report.csv",
    [Parameter()]
    [string]$OutputMarkdownPath = "$PSScriptRoot\..\..\docfx\includes\perf.md"
)

# Load the CSV report
$csvReport = Import-Csv -Path $CsvReportPath | Select-Object Method, Mean, Allocated

$reportSpecs = @(
    , [PSCustomObject]@{
        Name = 'object as map';
        Metric = 'Mean';
        MetricTitle = 'Time (ns)';
        Libs = @(
            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeMap'; Deserialize = 'DeserializeMap' }
            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeMap_MsgPackCSharp'; Deserialize = 'DeserializeMap_MsgPackCSharp' }
            , [PSCustomObject]@{ Name = 'STJ'; Serialize = 'SerializeMap_STJ'; Deserialize = 'DeserializeMap_STJ' }
            , [PSCustomObject]@{ Name = 'Newtonsoft'; Serialize = 'SerializeMap_Newtonsoft'; Deserialize = 'DeserializeMap_Newtonsoft' }
        )
    }
    , [PSCustomObject]@{
        Name = 'object as map';
        Metric = 'Allocated';
        MetricTitle = 'Allocated (bytes)';
        Libs = @(
            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeMap'; Deserialize = 'DeserializeMap' }
            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeMap_MsgPackCSharp'; Deserialize = 'DeserializeMap_MsgPackCSharp' }
            , [PSCustomObject]@{ Name = 'STJ'; Serialize = 'SerializeMap_STJ'; Deserialize = 'DeserializeMap_STJ' }
            , [PSCustomObject]@{ Name = 'Newtonsoft'; Serialize = 'SerializeMap_Newtonsoft'; Deserialize = 'DeserializeMap_Newtonsoft' }
        )
    }
#    , [PSCustomObject]@{
#        Name = 'object as map (non-default ctor or init properties)';
#        Metric = 'Mean';
#        MetricTitle = 'Time (ns)';
#        Libs = @(
#            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeMap'; Deserialize = 'DeserializeMapInit' }
#            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeMap_MsgPackCSharp'; Deserialize = 'DeserializeMapInit_MsgPackCSharp' }
#            , [PSCustomObject]@{ Name = 'STJ'; Serialize = 'SerializeMap_STJ'; Deserialize = 'DeserializeMapInit_STJ' }
#            , [PSCustomObject]@{ Name = 'Newtonsoft'; Serialize = 'SerializeMap_Newtonsoft'; Deserialize = 'DeserializeMapInit_Newtonsoft' }
#        )
#    }
    , [PSCustomObject]@{
        Name = 'object as array';
        Metric = 'Mean';
        MetricTitle = 'Time (ns)';
        Libs = @(
            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeAsArray'; Deserialize = 'DeserializeAsArray' }
            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeAsArray_MsgPackCSharp'; Deserialize = 'DeserializeAsArray_MsgPackCSharp' }
        )
    }
    , [PSCustomObject]@{
        Name = 'object as array';
        Metric = 'Allocated';
        MetricTitle = 'Allocated (bytes)';
        Libs = @(
            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeAsArray'; Deserialize = 'DeserializeAsArray' }
            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeAsArray_MsgPackCSharp'; Deserialize = 'DeserializeAsArray_MsgPackCSharp' }
        )
    }
#    , [PSCustomObject]@{
#        Name = 'object as array (non-default ctor or init properties)';
#        Metric = 'Mean';
#        MetricTitle = 'Time (ns)';
#        Libs = @(
#            , [PSCustomObject]@{ Name = 'NB.MessagePack'; Serialize = 'SerializeAsArray'; Deserialize = 'DeserializeAsArrayInit' }
#            , [PSCustomObject]@{ Name = 'MsgPack-CS'; Serialize = 'SerializeAsArray_MsgPackCSharp'; Deserialize = 'DeserializeAsArrayInit_MsgPackCSharp' }
#        )
#    }
)

Function Trim-Units {
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [string]$Value
    )
    process {
        # Remove the units from the value
        $Value = $Value -replace '(\d+)(\.\d+)?\s*([a-zA-Z]+)', '$1$2'
        # Convert to a number and return
        $Value = [double]$Value
        return $Value
    }
}

$content = 'In the perf comparisons below, the following legend applies

Library alias | Full name
--- | ---
NB.MessagePack | Nerdbank.MessagePack (this library)
MsgPack-CS | MessagePack-CSharp
Newtonsoft | Newtonsoft.Json
STJ | System.Text.Json

### Object serialization comparisons

Each stacked bar shows the time taken to serialize and deserialize an object.
The two times added together represent round-trip time.

In messagepack, an object may be serialized as a map of property names and values, or as an array of just values.

Some libraries are absent from some comparisons because they don''t support a particular format.

'

$content += $reportSpecs | % {
    $spec = $_
    $specLibs = ($spec.Libs | % { "`"$($_.Name)`"" }) -join ', '
    $serializeTimes = $spec.Libs | % { $testName = $_.Serialize; $csvReport | ? { $_.Method -eq $testName } | Select-Object -ExpandProperty $spec.Metric } | Trim-Units
    $deserializeTimes = $spec.Libs | % { $testName = $_.Deserialize; $csvReport | ? { $_.Method -eq $testName } | Select-Object -ExpandProperty $spec.Metric } | Trim-Units
    $serializePlusDeserializeTimes = @()
    $maxMetric = 0
    for ($i = 0; $i -lt $serializeTimes.Count; $i++) {
        $serializePlusDeserializeTimes += [double]$serializeTimes[$i] + [double]$deserializeTimes[$i]
        $maxMetric = [math]::Max($maxMetric, $serializePlusDeserializeTimes[$i])
    }

    # Round up maxMetric to the nearest 100
    $maxMetric = [math]::Ceiling($maxMetric / 100) * 100

    '```mermaid
xychart-beta
'
    "    x-axis `"Libraries`" [$specLibs]
"
    "    y-axis `"$($spec.MetricTitle)`" 0 --> $maxMetric
"
    "    title `"$($spec.Name)`"
"

    "    bar `"Serialize+Deserialize`" [$($serializePlusDeserializeTimes -Join ',')]
"
    "    bar `"Serialize`" [$($serializeTimes -Join ',')]
"

    '```
'
}

$content | Out-File -FilePath $OutputMarkdownPath -Encoding utf8 -Force
