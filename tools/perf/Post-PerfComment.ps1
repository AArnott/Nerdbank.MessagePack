#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Posts performance comparison results as a PR comment
.DESCRIPTION
    This script posts detailed performance analysis results as a comment on the pull request
.PARAMETER GitHubToken
    GitHub token for API access
.PARAMETER Repository
    Repository in format owner/repo
.PARAMETER PullRequestNumber
    Pull request number
.PARAMETER SummaryReportPath
    Path to the performance summary markdown file
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory)]
    [string]$GitHubToken,
    
    [Parameter(Mandatory)]
    [string]$Repository,
    
    [Parameter(Mandatory)]
    [int]$PullRequestNumber,
    
    [Parameter(Mandatory)]
    [string]$SummaryReportPath
)

try {
    if (-not (Test-Path $SummaryReportPath)) {
        throw "Summary report file not found: $SummaryReportPath"
    }
    
    $summaryContent = Get-Content $SummaryReportPath -Raw
    
    # Create comment body with additional context
    $commentBody = @"
## üìä Performance Benchmark Results

$summaryContent

### Details
This comment was automatically generated by the performance benchmarking workflow. The analysis compares this PR's performance against the last 10 CI builds on the main branch.

**Regression Detection:**
- Performance regressions are detected when results exceed 2 standard deviations from the historical mean
- Both benchmark execution time and AOT native file size are monitored
- Any detected regression will cause the build to fail

**Tracked Benchmarks:**
- ``SimplePoco.DeserializeMapInit``
- ``SimplePoco.DeserializeMap``
- ``SimplePoco.SerializeMap``
- ``SimplePoco.SerializeAsArray``
- ``SimplePoco.DeserializeAsArray``
"@
    
    # Prepare API request
    $headers = @{
        'Authorization' = "token $GitHubToken"
        'Accept' = 'application/vnd.github.v3+json'
        'User-Agent' = 'Nerdbank.MessagePack-PerfBot/1.0'
    }
    
    $body = @{
        body = $commentBody
    } | ConvertTo-Json
    
    $uri = "https://api.github.com/repos/$Repository/issues/$PullRequestNumber/comments"
    
    Write-Host "üìù Posting performance results to PR #$PullRequestNumber..."
    $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body -ContentType 'application/json'
    
    Write-Host "‚úÖ Successfully posted comment to PR #$PullRequestNumber"
    Write-Host "üîó Comment URL: $($response.html_url)"
}
catch {
    Write-Error "‚ùå Failed to post PR comment: $($_.Exception.Message)"
    throw
}