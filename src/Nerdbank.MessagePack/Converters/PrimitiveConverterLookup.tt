<#@ assembly name="System.Core" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
// Copyright (c) Andrew Arnott. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

#pragma warning disable SA1306 // Field names should begin with lower-case letter
#pragma warning disable SA1309 // Field names should not begin with underscore

using System.Diagnostics.CodeAnalysis;

namespace Nerdbank.MessagePack.Converters;

<#
var convertersByType = new List<ConverterInfo>
{
	new ConverterInfo("char", "CharConverter"),
	new ConverterInfo("byte", "ByteConverter"),
	new ConverterInfo("sbyte", "SByteConverter"),
	new ConverterInfo("short", "Int16Converter"),
	new ConverterInfo("ushort", "UInt16Converter"),
	new ConverterInfo("int", "Int32Converter"),
	new ConverterInfo("uint", "UInt32Converter"),
	new ConverterInfo("long", "Int64Converter"),
	new ConverterInfo("ulong", "UInt64Converter"),
	new ConverterInfo("System.Numerics.BigInteger", "BigIntegerConverter"),
	new ConverterInfo("bool", "BooleanConverter"),
	new ConverterInfo("float", "SingleConverter"),
	new ConverterInfo("double", "DoubleConverter"),
	new ConverterInfo("decimal", "DecimalConverter"),
	new ConverterInfo("DateTime", "DateTimeConverter"),
	new ConverterInfo("DateTimeOffset", "DateTimeOffsetConverter"),
	new ConverterInfo("TimeSpan", "TimeSpanConverter"),
	new ConverterInfo("Guid", "GuidConverter"),
	new ConverterInfo("System.Text.Rune", "RuneConverter", "NET"),
	new ConverterInfo("Int128", "Int128Converter", "NET"),
	new ConverterInfo("UInt128", "UInt128Converter", "NET"),
	new ConverterInfo("Half", "HalfConverter", "NET"),
	new ConverterInfo("TimeOnly", "TimeOnlyConverter", "NET"),
	new ConverterInfo("DateOnly", "DateOnlyConverter", "NET"),
	new ConverterInfo("System.Drawing.Color", "SystemDrawingColorConverter"),
	new ConverterInfo("Memory<byte>", "MemoryOfByteConverter"),
	new ConverterInfo("ReadOnlyMemory<byte>", "ReadOnlyMemoryOfByteConverter"),
	new ConverterInfo("string", "StringConverter", IsRefType: true),
	new ConverterInfo("Version", "VersionConverter", IsRefType: true),
	new ConverterInfo("Uri", "UriConverter", IsRefType: true),
	new ConverterInfo("byte[]", "ByteArrayConverter", IsRefType: true),
    new ConverterInfo("System.Text.Json.Nodes.JsonNode", "JsonNodeConverter", IsRefType: true),
    new ConverterInfo("System.Text.Json.JsonElement", "JsonElementConverter"),
    new ConverterInfo("System.Text.Json.JsonDocument", "JsonDocumentConverter", IsRefType: true),
    new ConverterInfo("System.Dynamic.ExpandoObject", "ExpandoObjectConverter", IsRefType: true),
};
#>
/// <summary>
/// Provides access to built-in converters for primitive types.
/// </summary>
/// <remarks>
/// This class is carefully crafted to help trimming be effective by avoiding type references
/// to types that are not used in the application.
/// Although the retrieval method references all the the fact that it is generic gives the
/// JIT/AOT compiler the opportunity to only reference types that match the type argument
/// (at least for the value types).
/// </remarks>
internal static class PrimitiveConverterLookup
{
<# foreach (var converterGroup in convertersByType.GroupBy(c => c.PreprocessorCondition)) {
	 if (converterGroup.Key is not null) { #>
#if <#=converterGroup.Key#>
<#   } 
	 foreach (var converter in converterGroup) { #>
	private static IMessagePackConverterInternal? <#=converter.FieldName#>;
<#	  if (converter.IsRefType) { #>
	private static IMessagePackConverterInternal? <#=converter.ReferencePreservingFieldName#>;
<#	  }
	 }
	 if (converterGroup.Key is not null) { #>
#endif
<#   }
} #>

	/// <summary>
	/// Gets a built-in converter for the given type, if one is available.
	/// </summary>
	/// <typeparam name="T">The type to get a converter for.</typeparam>
	/// <param name="referencePreserving">Indicates whether a reference-preserving converter is requested.</param>
	/// <param name="converter">Receives the converter, if one is available.</param>
	/// <returns><see langword="true" /> if a converter was found; <see langword="false" /> otherwise.</returns>
	internal static bool TryGetPrimitiveConverter<T>(ReferencePreservationMode referencePreserving, [NotNullWhen(true)] out MessagePackConverter<T>? converter)
	{
<# foreach (var converterGroup in convertersByType.GroupBy(c => c.PreprocessorCondition)) {
	 if (converterGroup.Key is not null) { #>
#if <#=converterGroup.Key#>
<#   } 
	 foreach (var converter in converterGroup) { #>
		if (typeof(T) == typeof(<#=converter.TypeName#>))
		{
<#
	if (converter.IsRefType) {
#>
			if (referencePreserving != ReferencePreservationMode.Off)
			{
				converter = (MessagePackConverter<T>)(<#=converter.ReferencePreservingFieldName#> ??= new <#=converter.ConverterName#>().WrapWithReferencePreservation());
			}
			else
			{
				converter = (MessagePackConverter<T>)(<#=converter.FieldName#> ??= new <#=converter.ConverterName#>());
			}

<# } else { #>
			converter = (MessagePackConverter<T>)(<#=converter.FieldName#> ??= new <#=converter.ConverterName#>());
<# } #>
			return true;
		}

<#   }
	 if (converterGroup.Key is not null) { #>
#endif
<#   }
} #>
		converter = null;
		return false;
	}
}
<#+
record struct ConverterInfo(string TypeName, string ConverterName, string PreprocessorCondition = null, bool IsRefType = false)
{
	internal string FieldName => $"_{ConverterName}";
	internal string ReferencePreservingFieldName => $"{FieldName}ReferencePreserving";
}
#>